library(optparse)
library(tidyverse)
library(DESeq2)
library(ggplot2)

# arguments to provide
option_list = list(
    make_option(c("-i", "--count"), type="character", metavar="character"), # read count data 
    make_option(c("-m", "--metadata"), type="character", metavar="character"), # "samples.tsv"
    make_option(c("-o", "--outdir"), type="character", metavar="character"), # dir to save
    make_option(c("-x", "--pcax"), type="character", metavar="character"), # string
    make_option(c("-y", "--pcay"), type="character", metavar="character") # string
)

# Import counts table
countdata <- read.table(opt$count, header = TRUE, row.names = 1)

# Remove .bam from column identifiers
colnames(countdata) <- gsub(".sorted.bam", "", colnames(countdata), fixed = T)
colnames(countdata) <- gsub("temp.mapped.", "", colnames(countdata), fixed = T)
colnames(countdata) <- gsub("_REP$", "", colnames(countdata), fixed = T)
colnames(countdata) <- gsub("_rep$", "", colnames(countdata), fixed = T)
colnames(countdata) <- gsub("_Rep$", "", colnames(countdata), fixed = T)


# Remove chr, start, end, strand, length columns
countdata <- countdata[, c(-1:-5)]

# Import metadata
metadata <- read.delim(opt$metadata, sep = "\t", row.names = 1)

# Add sampleID's to the mapping file
metadata$sampleid <- row.names(metadata)

# Reorder sampleID's to match featruecounts column order
metadata <- metadata[match(colnames(countdata), metadata$sampleid), ]

# make DESeq2 object from counts and metadata
# - countData : count dataframe
# - colData : sample metadata in the dataframe with row names as sampleID's
# - desigh : The design of the comparisons to use.
#            Use (~) befor the name of the column variable to compare
ddsMat <- DESeqDataSetFromMatrix(countData = countdata,
                                 colData = metadata,
                                 design = ~condition)



# Find differential expressed genes
ddsMat <- DESeq(ddsMat)


detectGroups <- function (x){  # x are col names
  tem <- gsub("[0-9]*$","",x) # Remove all numbers from end
  tem <- gsub("_$","",tem); # remove "_" from end
  return( tem )
}
rld <- rlog(ddsMat, blind = T)
rld_mat <- assay(rld)
pca <- prcomp(t(rld_mat))
PCAxy <- c(as.integer(opt$pcax),as.integer(opt$pcay)) # selected principal components
percentVar=round(100*summary(pca)$importance[2, PCAxy],0)

meta <- data.frame(detectGroups(colnames(countdata)), row.names = colnames(countdata))
colnames(meta)[1] <- "group"
df <- cbind(meta, pca$x[, PCAxy])

if(ncol(countdata)<20){ # change size depending of # samples
  p = ggplot(df) + geom_point(aes(x=PC1, y= PC2, color = group), size=5)
}else if(ncol(countdata)<50){
  p = ggplot(df) + geom_point(aes(x=PC1, y= PC2, color = group), size=3)
}else{
  p = ggplot(df) + geom_point(aes(x=PC1, y= PC2, color = group), size=2)
}

# for showing shapes on ggplot2. The first 6 are default. Default mapping can only show 6 types.
shapes = c(16,17,15,3,7,8,   1,2,4:6,9:15,18:25)
p <- p + scale_shape_manual(values= shapes) +
  xlab(paste0("PC", opt$pcax ,": ", percentVar[1],"% variance")) +
  ylab(paste0("PC", opt$pcay ,": ", percentVar[2],"% variance")) + 
  ggtitle("Principal component analysis (PCA)") + 
  coord_fixed(ratio=1.0) + theme(aspect.ratio=1)
# png(filename=opt$outdir, height=700, width=700, bg="white")
par(oma=c(2,1,0,0))
print(p)
